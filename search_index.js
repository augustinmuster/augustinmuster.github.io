var documenterSearchIndex = {"docs":
[{"location":"geometries/#Geometries-library","page":"Geometries","title":"Geometries library","text":"","category":"section"},{"location":"geometries/","page":"Geometries","title":"Geometries","text":"This module provides two functions to discretize spheres on a cubic lattice.","category":"page"},{"location":"geometries/#Functions-Documentation","page":"Geometries","title":"Functions Documentation","text":"","category":"section"},{"location":"geometries/","page":"Geometries","title":"Geometries","text":"CoupledElectricMagneticDipoles.Geometries.gen_sphere_lattice_cubes","category":"page"},{"location":"geometries/#Main.CoupledElectricMagneticDipoles.Geometries.gen_sphere_lattice_cubes","page":"Geometries","title":"Main.CoupledElectricMagneticDipoles.Geometries.gen_sphere_lattice_cubes","text":"gen_sphere_lattice_cubes(s,r;verbose=true)\n\nDiscretizes a sphere of radius R in cubes on a cubic lattice where the radius of this sphere is divided in s lattice constants. ref_id is the refractive index id (we suppose that the entire sphere has the same refractive index.) Returns 2D array with first dimension is the N units that compose the sphere and the second is\n\nx-component of the position of the unit\ny-component of the position of the unit\nz-component of the position of the unit\ndistance from the origin\nrefractive index id\nlattice parameter\nvolume of the cubic unit\n\n\n\n\n\n","category":"function"},{"location":"geometries/","page":"Geometries","title":"Geometries","text":"CoupledElectricMagneticDipoles.Geometries.gen_sphere_lattice_spheres","category":"page"},{"location":"geometries/#Main.CoupledElectricMagneticDipoles.Geometries.gen_sphere_lattice_spheres","page":"Geometries","title":"Main.CoupledElectricMagneticDipoles.Geometries.gen_sphere_lattice_spheres","text":"gen_sphere_lattice_spheres(s,r;verbose=true)\n\nDiscretizes a sphere of radius R in spheres on a cubic lattice where the radius of this sphere is divided in s lattice constants. ref_id is the refractive index id (we suppose that the entire sphere has the same refractive index.) Returns 2D array with first dimension is the N units that compose the sphere and the second is\n\nx-component of the position of the unit\ny-component of the position of the unit\nz-component of the position of the unit\ndistance from the origin\nrefractive index id\nlattice parameter\nvolume of the spherical unit\n\n\n\n\n\n","category":"function"},{"location":"postprocessing/#Post-Processing","page":"PostProcessing","title":"Post Processing","text":"","category":"section"},{"location":"postprocessing/#Functions-Documentation","page":"PostProcessing","title":"Functions Documentation","text":"","category":"section"},{"location":"postprocessing/","page":"PostProcessing","title":"PostProcessing","text":"CoupledElectricMagneticDipoles.PostProcessing.compute_cross_sections","category":"page"},{"location":"postprocessing/","page":"PostProcessing","title":"PostProcessing","text":"CoupledElectricMagneticDipoles.PostProcessing.compute_cross_sections_e_m","category":"page"},{"location":"postprocessing/","page":"PostProcessing","title":"PostProcessing","text":"CoupledElectricMagneticDipoles.PostProcessing.point_dipole","category":"page"},{"location":"postprocessing/","page":"PostProcessing","title":"PostProcessing","text":"CoupledElectricMagneticDipoles.PostProcessing.point_dipole_dl","category":"page"},{"location":"postprocessing/","page":"PostProcessing","title":"PostProcessing","text":"CoupledElectricMagneticDipoles.PostProcessing.field_sca","category":"page"},{"location":"postprocessing/#Main.CoupledElectricMagneticDipoles.PostProcessing.field_sca","page":"PostProcessing","title":"Main.CoupledElectricMagneticDipoles.PostProcessing.field_sca","text":"field_sca(knorm, alpha, E_inc, r0, pos)\n\nIt computes the scattered Field from the ensamble of dipoles.\n\nImputs\n\nknorm = wavenumber\nalpha = polarizability of the particles (6N x 6N matrix, where -N- is the number of dipoles)\nE_inc = incoming field at every dipole (6N x 1 vector, where -N- is the number of dipoles). It is equal to the product of the (inverse) DDA matrix and the external field. \nr0 = position where the field is observed (Np x 3 matrix, where -Np- is the number of points where the field is calculated)\npos = position of the dipoles (N x 3 matrix, where -N- is the number of points)\n\nOutputs\n\nfield_r is the field scattered by the dipoles (6N x 1 vector)\n\nEquation\n\nmathbfE_sca(mathbfr) = k^2G(mathbfrmathbfbarr_N) alpha(mathbfbarr_N) mathbfE_inc(mathbfbarr_N) = k^2 G(mathbfrmathbfbarr_N) alpha(mathbfbarr_N) D(mathbfbarr_N) E_0\n\n\\r = r0 \\bar{r}}N = pos \\alphagg(\\mathbf{\\bar{r}}N) = alpha \\GG(\\r,\\mathbf{\\bar{r}}N) = `Gtensor\\E_{inc}(\\mathbf{\\bar{r}}_N) =E_inc`\n\n\\E{sca}(\\r) = `fieldr`\n\n\n\n\n\n","category":"function"},{"location":"postprocessing/","page":"PostProcessing","title":"PostProcessing","text":"CoupledElectricMagneticDipoles.PostProcessing.LDOS_rf","category":"page"},{"location":"postprocessing/#Main.CoupledElectricMagneticDipoles.PostProcessing.LDOS_rf","page":"PostProcessing","title":"Main.CoupledElectricMagneticDipoles.PostProcessing.LDOS_rf","text":"LDOS_rf(knorm, alpha, Ainv, pos, rd, dip_o)\n\nIt Computes partial local density of states (LDOS) by the imaginary part of the returning field (rf)\n\nImputs\n\nknorm = wavenumber\nalpha = polarizability of the particles (6N x 6N matrix, where -N- is the number of dipoles)\nAinv = (inverse) DDA matrix (6N x 6N matrix, [I - k^2Galpha]^(-1))\npos = position of the dipoles (N x 3 matrix, where -N- is the number of points)\nrd = emitting dipole position, i. e., position where the LDOS is calculated\ndip_o defined the nature of the dipole (see -point_dipole- function). Therefore, it defines the component of the LDOS that is calculated \n\nOutputs\n\nLDOS is a scalar with the value of the partial LDOS\n\nEquation\n\nmathrmLDOS(mathbfbarr_Nr_0) = 1 + dfrac1bm mu^2 dfrac6pik^3 Imleftbm mu^* cdot k^2GG(r_0mathbfbarr_N) alphagg(mathbfbarr_N) DD(mathbfbarr_N) k^2 GG(mathbfbarr_N r_0) bm mu  right\n\n\\alphagg(\\mathbf{\\bar{r}}N) = alpha \\DD(\\mathbf{\\bar{r}}N) = Ainv = [I - k^2Galpha]^(-1) \\bar{r}}N = pos \\r0 = rd \\dfrac{1}{\\epsilon0\\epsilon} \\bm \\mu = `dipo` (the pre-factor -\\dfrac{1}{\\epsilon_0\\epsilon}- dessapears after normalization)\n\nk^2\\GG(\\r0,\\mathbf{\\bar{r}}N) \\alphagg(\\mathbf{\\bar{r}}N) \\DD(\\mathbf{\\bar{r}}N) k^2 \\GG(\\mathbf{\\bar{r}}N, \\r0) \\bm \\mu = field_r \\DD(\\mathbf{\\bar{r}}N) k^2 \\GG(\\mathbf{\\bar{r}}N, \\r0) \\bm \\mu = `Einc`\n\n\\mathrm{LDOS}(\\mathbf{\\bar{r}}N,\\r0) = LDOS\n\n\n\n\n\n","category":"function"},{"location":"postprocessing/","page":"PostProcessing","title":"PostProcessing","text":"CoupledElectricMagneticDipoles.PostProcessing.LDOS_sc","category":"page"},{"location":"postprocessing/#Main.CoupledElectricMagneticDipoles.PostProcessing.LDOS_sc","page":"PostProcessing","title":"Main.CoupledElectricMagneticDipoles.PostProcessing.LDOS_sc","text":"LDOS_rf(knorm, alpha, Ainv, pos, rd, dip_o)\n\nIt Computes partial local density of states (LDOS) by the scattering cross section (sc)\n\nImputs\n\nknorm = wavenumber\nalpha = polarizability of the particles (6N x 6N matrix, where -N- is the number of dipoles)\nAinv = (inverse) DDA matrix (6N x 6N matrix, [I - k^2Galpha]^(-1))\npos = position of the dipoles (N x 3 matrix, where -N- is the number of points)\nrd = emitting dipole position, i. e., position where the LDOS is calculated\ndip_o defined the nature of the dipole (see -point_dipole- function). Therefore, it defines the component of the LDOS that is calculated \n\nOutputs\n\nLDOS is a scalar with the value of the partial LDOS\n\nEquation\n\nLDOS = sigma^scasigma^sca_0\n\n\n\n\n\n","category":"function"},{"location":"postprocessing/","page":"PostProcessing","title":"PostProcessing","text":"CoupledElectricMagneticDipoles.PostProcessing.LDOS_EP","category":"page"},{"location":"postprocessing/#Main.CoupledElectricMagneticDipoles.PostProcessing.LDOS_EP","page":"PostProcessing","title":"Main.CoupledElectricMagneticDipoles.PostProcessing.LDOS_EP","text":"LDOS_EP(knorm, alpha, Ainv, pos, rd, dip_o)\n\nIt Computes partial local density of states (LDOS) by calculating the emiting power (EP). Due to the integration, the method is not very accurate.\n\nImputs\n\nknorm = wavenumber\nalpha = polarizability of the particles (6N x 6N matrix, where -N- is the number of dipoles)\nAinv = (inverse) DDA matrix (6N x 6N matrix, [I - k^2Galpha]^(-1))\npos = position of the dipoles (N x 3 matrix, where -N- is the number of points)\nrd = emitting dipole position, i. e., position where the LDOS is calculated\ndip_o defined the nature of the dipole (see -point_dipole- function). Therefore, it defines the component of the LDOS that is calculated \n\nOutputs\n\nLDOS is a scalar with the value of the partial LDOS\n\nEquation\n\nLDOS = PP_0\n\n\n\n\n\n","category":"function"},{"location":"ddacore/#DDA-Core-Functionalities","page":"DDACore","title":"DDA Core Functionalities","text":"","category":"section"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_DDA_e(knorm,r,alpha,input_field::Function;solver=\"LAPACK\",verbose=true)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e-Tuple{Any, Any, Any, Function}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e","text":" solve_DDA_e(knorm,r,alpha,input_field::Function;solver=\"LAPACK\",verbose=true)\n\nBuilds and solves the DDA equations under a given input field, i.e.\n\nvecE_i=vecE_0(vecr_i)+k^2sum_ineq j^NtildeG_e(vecr_ivecr_j)alpha_jvecE_j\n\nfor a group of N only electric dipoles and returns the polarizations and incident fields of every dipole.\n\n#Arguments\n\nknorm: the wavenumber of the input field.\nr: a two-dimensional float array of size Ntimes 3 containing the positions vecr of all the dipoles.\nalpha: a three-dimensional complex array of size Ntimes 3times 3containing the polarisability times 3 tensor of each dipole, or one dimensional array of size N containing the scalar polarizability of each dipole.\ninput_field: a function taking the wavenumber and one position vector of length 3, i.e. of the form field(knorm,r), and that output a complex array of length 3 which computes the input field E_0 evaluated at this position. Can be for example a plane wave or a point source.\nsolver: a string that contains the name of the solver that need to be used. For this, check the correponding section on the home page. By default set to \"LAPACK\".\nverbose: whether to output pieces of information to the standard output during running or not. By default set to true.\n\n#Outputs\n\np: a two-dimensional complex array of size Ntimes 3 containing the polarization p of each dipole.\ne_inc: a two-dimensional complex array of size Ntimes 3 containing the incident fields E_inc on each dipole.\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_DDA_e(knorm,r,alpha;solver=\"JULIA\",verbose=true)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e-Tuple{Any, Any, Any}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e","text":" solve_DDA_e(knorm,r,alpha;solver=\"JULIA\",verbose=true)\n\nSimilar to solve_DDA_e(knorm,r,alpha,input_field::Function;solver=\"LAPACK\",verbose=true), but without input field. Returns then the inverse of the DDA Matrix. #Arguments\n\nknorm: the wavenumber of the input field.\nr: a two-dimensional float array of size Ntimes 3 containing the positions vecr of all the dipoles.\nalpha: a three-dimensional complex array of size Ntimes 3times 3containing the polarisability 3x3 tensor of each dipole, or one dimensional array of size N containing the scalar polarizability of each dipole.\nsolver: string that contains the name of the invertion method that need to be used. For this, check the correponding section on the home page. By default set to \"JULIA\".\nverbose: whether to output informations to the standard output during running or not. By default set to true.\n\n#Output\n\n3Ntimes 3N inverse of the DDA matrix.\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_DDA_e(kr,alpha_dl,input_field::Function;solver=\"LAPACK\",verbose=true)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e-Tuple{Any, Any, Function}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e","text":" solve_DDA_e(kr,alpha_dl,input_field::Function;solver=\"LAPACK\",verbose=true)\n\nBuilds and solves the DDA equations with dimensionless input under a given input field, i.e.\n\nvecE_i=vecE_0(vecr_i)+sum^N_jneqjG_e(vecr_ivecr_j)alpha_jvecE_j\nendequation\n\nfor a group of N only electric dipoles and returns the polarizations and incident fields.\n\n#Arguments\n\nkr: two dimensional float array of size Ntimes 3 containing the dimentionless positions kvecr of each dipole.\nalpha_dl: three dimensional complex array of size Ntimes 3times 3containing the dimensionless polarisability 3times 3 tensor of each dipole, or one dimenstional array of size N containing the scalar polarizability of each dipole.\ninput_field: function taking one dimensionless position vector of length 3, i.e. of the form field(kr), and that output a complex array of length 3 which compute the input field E_0 elvaluated at this position. Can be for example a plane wave or a point source.\nsolver: string that contains the name of the solver that need to be used. For this, check the correponding section on the home page. By default set to \"LAPACK\".\nverbose: whether to output informations to the standard output during running or not. By default set to true.\n\n#Outputs\n\np: two dimensional complex array of size Ntimes 3 containing the polarizations p of each dipoles (in units of the electric field!).\ne_inc: two dimensional complex array of size Ntimes 3 containing the incident fields E_inc on every dipole.\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_DDA_e(kr,alpha_dl;solver=\"JULIA\",verbose=true)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e-Tuple{Any, Any}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e","text":" solve_DDA_e(kr,alpha_dl;solver=\"JULIA\",verbose=true)\n\nSimilar to solve_DDA_e(kr,alpha_dl,input_field::Function;solver=\"LAPACK\",verbose=true), but without input field. Return then the inverse of the DDA Matrix.\n\n#Arguments\n\nkr: two dimensional float array of size Ntimes 3 containing the dimentionless positions kvecr of each dipole.\nalpha_dl: three dimensional complex array of size Ntimes 3times 3containing the dimensionless polarisability 3times 3 tensor of each dipole, or one dimenstional array of size N containing the scalar polarizability of each dipole.\nsolver: string that contains the name of the solver that need to be used. For this, check the correponding section on the home page. By default set to \"LAPACK\".\nverbose: whether to output informations to the standard output during running or not. By default set to true.\n\n#Output\n\n3Ntimes 3N inverse of the DDA matrix.\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m(knorm,r,alpha_e,alpha_m,input_field::Function;solver=\"LAPACK\",verbose=true)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m-Tuple{Any, Any, Any, Any, Function}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m","text":" solve_DDA_e_m(knorm,r,alpha_e,alpha_m,input_field::Function;solver=\"LAPACK\",verbose=true)\n\nBuilds and solves the DDA equations under a given input field, i.e.\n\nbeginalign\nvecE_i  =vecE_0left(vecr_iright)+sum_jne imathbbG_Eleft(vecr_ivecr_jright)alpha_E^(j)vecE_j+imathbbG_Mleft(vecr_ivecr_jright)alpha_M^(j)vecH_jlabeleq100a\nvecH_i  =vecH_0left(vecr_iright)+sum_jne i-imathbbG_Mleft(vecr_ivecr_jright)alpha_E^(j)vecE_j+mathbbG_Eleft(vecr_ivecr_jright)alpha_M^(j)vecH_jlabeleq100b\nendalign\n\nfor a group of N electric and magnetic dipoles and return the polarisations of every particle and incident fields on every particle.\n\n#Arguments\n\nknorm: the wavenumber of the input field.\nr: a two-dimensional float array of size Ntimes 3 containing the positions vecr of all the dipoles.\nalpha_e: a three-dimensional complex array of size Ntimes 3times 3containing the electric polarisability 3times 3 tensor of every dipole, or one dimensional array of size N containing the scalar polarizability of every dipole.\nalpha_m: a three-dimensional complex array of size Ntimes 3times 3containing the magnetic polarisability 3times 3 tensor of every dipole, or one dimensional array of size N containing the scalar polarizability of every dipole.\ninput_field: a function taking the wavenumber and one position vector of length 3, i.e. of the form field(knorm,r), and that output a complex array of length 3 which computes the input fields E_0 and H_0 evaluated at this position. Can be for example a plane wave or a point source.\nsolver: a string that five the name of the solver that need to be used. For this, check the correponding section on the home page. By default set to \"LAPACK\".\nverbose: whether to output pieces of information to the standard output during running or not. By default set to true.\n\n#Outputs\n\np: a two-dimensional complex array of size Ntimes 3 containing the electric polarizations p moments of all the electric dipoles.\nm: a two-dimensional complex array of size Ntimes 3 containing the magnetic polarizations m moments of all the magnetic dipoles.\ne_inc: a two-dimensional complex array of size Ntimes 3 containing the incident electric fields E_inc on all the particles.\nh_inc: a two-dimensional complex array of size Ntimes 3 containing the incident magnetic fields H_inc on all the particles.\ne_inp: a two-dimensional complex array of size Ntimes 3 containing the input electric fields E_inc on all the particles.\nh_inp: a two-dimensional complex array of size Ntimes 3 containing the input magnetic fields H_inc on all the particles.\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m(knorm,r,alpha_e,alpha_m;solver=\"LAPACK\",verbose=true)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m-NTuple{4, Any}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m","text":" solve_DDA_e_m(knorm,r,alpha_e,alpha_m;solver=\"LAPACK\",verbose=true)\n\nBuilds and solves the DDA equations under a given input field, i.e.\n\nbeginalign\nvecE_i  =vecE_0left(vecr_iright)+sum_jne imathbbG_Eleft(vecr_ivecr_jright)alpha_E^(j)vecE_j+imathbbG_Mleft(vecr_ivecr_jright)alpha_M^(j)vecH_jlabeleq100a\nvecH_i  =vecH_0left(vecr_iright)+sum_jne i-imathbbG_Mleft(vecr_ivecr_jright)alpha_E^(j)vecE_j+mathbbG_Eleft(vecr_ivecr_jright)alpha_M^(j)vecH_jlabeleq100b\nendalign\n\nfor a group of N electric and magnetic dipoles and return the polarisations of every particle and incident fields on every particle.\n\n#Arguments\n\nknorm: the wavenumber of the input field.\nr: a two-dimensional float array of size Ntimes 3 containing the positions vecr of all the dipoles.\nalpha_e: a three-dimensional complex array of size Ntimes 3times 3containing the electric polarisability 3times 3 tensor of every dipole, or one dimensional array of size N containing the scalar polarizability of every dipole.\nalpha_m: a three-dimensional complex array of size Ntimes 3times 3containing the magnetic polarisability 3times 3 tensor of every dipole, or one dimensional array of size N containing the scalar polarizability of every dipole.\ninput_field: a function taking the wavenumber and one position vector of length 3, i.e. of the form field(knorm,r), and that output a complex array of length 3 which computes the input fields E_0 and H_0 evaluated at this position. Can be for example a plane wave or a point source.\nsolver: a string that five the name of the solver that need to be used. For this, check the correponding section on the home page. By default set to \"LAPACK\".\nverbose: whether to output pieces of information to the standard output during running or not. By default set to true.\n\n#Outputs\n\n6Ntimes 6N inverse of the DDA matrix\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m(kr,alpha_e_dl,alpha_m_dl,input_field::Function;solver=\"AUTO\",verbose=true)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m-Tuple{Any, Any, Any, Function}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m","text":" solve_DDA_e_m(kr,alpha_e_dl,alpha_m_dl,input_field::Function;solver=\"AUTO\",verbose=true)\n\nBuilds and solves the DDA equations with dimensionless inputs under a given input field, i.e.\n\nbeginalign\nvecE_i  =vecE_0left(vecr_iright)+sum_jne imathbbG_Eleft(vecr_ivecr_jright)alpha_E^(j)vecE_j+imathbbG_Mleft(vecr_ivecr_jright)alpha_M^(j)vecH_jlabeleq100a\nvecH_i  =vecH_0left(vecr_iright)+sum_jne i-imathbbG_Mleft(vecr_ivecr_jright)alpha_E^(j)vecE_j+mathbbG_Eleft(vecr_ivecr_jright)alpha_M^(j)vecH_jlabeleq100b\nendalign\n\nfor a group of N electric and magnetic dipoles and return the polarisations of every particle and incident fields on every particle.\n\n#Arguments\n\nkr: a two-dimensional float array of size Ntimes 3 containing the dimensionless positions kvecr of all the dipoles.\nalpha_e_dl: a three-dimensional complex array of size Ntimes 3times 3containing the dimensionless electric polarisability 3times 3 tensor of every dipole, or one dimensional array of size N containing the scalar polarizability of every dipole.\nalpha_m_dl: a three-dimensional complex array of size Ntimes 3times 3containing the dimesnionless magnetic polarisability 3times 3 tensor of every dipole, or one dimensional array of size N containing the scalar polarizability of every dipole.\ninput_field: a function taking the dimensionless position vector of length 3, i.e. of the form field(kr), and that output two complex array of length 3 which computes the input fields E_0 and H_0 evaluated at this position. Can be for example a plane wave or a point source.\nsolver: a string that five the name of the solver that need to be used. For this, check the correponding section on the home page. By default set to \"LAPACK\".\nverbose: whether to output pieces of information to the standard output during running or not. By default set to true.\n\n#Outputs\n\np: a two-dimensional complex array of size Ntimes 3 containing the electric polarizations p moments of all the electric dipoles (in units of the electric field).\nm: a two-dimensional complex array of size Ntimes 3 containing the magnetic polarizations m moments of all the magnetic dipoles (in units of the electric field).\ne_inc: a two-dimensional complex array of size Ntimes 3 containing the incident electric fields E_inc on all the particles (in units of the electric field).\nh_inc: a two-dimensional complex array of size Ntimes 3 containing the incident magnetic fields H_inc on all the particles (in units of the electric field).\ne_inp: a two-dimensional complex array of size Ntimes 3 containing the input electric fields E_inc on all the particles (in units of the electric field).\nh_inp: a two-dimensional complex array of size Ntimes 3 containing the input magnetic fields H_inc on all the particles (in units of the electric field).\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m(kr,alpha_e_dl,alpha_m_dl;solver=\"AUTO\",verbose=true)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m-Tuple{Any, Any, Any}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_DDA_e_m","text":" solve_DDA_e_m(kr,alpha_e_dl,alpha_m_dl;solver=\"AUTO\",verbose=true)\n\nSimilar to solve_DDA_e_m(kr,alpha_e_dl,alpha_m_dl,input_field::Function;solver=\"AUTO\",verbose=true), but without input field. Return then the inverse of the DDA Matrix. #Arguments\n\nkr: a two-dimensional float array of size Ntimes 3 containing the dimensionless positions kvecr of all the dipoles.\nalpha_e_dl: a three-dimensional complex array of size Ntimes 3times 3containing the dimensionless electric polarisability 3times 3 tensor of every dipole, or one dimensional array of size N containing the scalar polarizability of every dipole.\nalpha_m_dl: a three-dimensional complex array of size Ntimes 3times 3containing the dimesnionless magnetic polarisability 3times 3 tensor of every dipole, or one dimensional array of size N containing the scalar polarizability of every dipole.\nsolver: a string that five the name of the solver that need to be used. For this, check the correponding section on the home page. By default set to \"LAPACK\".\nverbose: whether to output pieces of information to the standard output during running or not. By default set to true.\n\n#Outputs\n\n6Ntimes 6N inverse of the DDA matrix\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.solve_system(matrix,vector,solver,verbose)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.solve_system-NTuple{4, Any}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.solve_system","text":" solve_system(matrix,vector,solver,verbose)\n\nSolves a system of equations of the type Ax=b wher matrix is A and vector is b using the method solver and returns x. To choose the appropriate solver, please read the informations on the home page.\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.invert_system(matrix,solver,verbose)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.invert_system-Tuple{Any, Any, Any}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.invert_system","text":" invert_system(matrix,solver,verbose)\n\nInverts the square matrix matrix using the solver method To choose the appropriate solver, please read the informations on the home page.\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.load_dda_matrix_e(kr,alpha_dl,verbose)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.load_dda_matrix_e-Tuple{Any, Any, Any}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.load_dda_matrix_e","text":" load_dda_matrix_e(kr,alpha_dl,verbose)\n\nBuilds the electric only DDA matrix A=I-Galpha with dimensionless postitions kr (two dimensional arrays of size Nx3) and dimensionless polarisabilities alpha_dl (a three-dimensional complex array of size Ntimes 3times 3containing the polarisability 3times 3 tensor of each dipole, or one dimensional array of size N containing the scalar polarizability of each dipole.) Returns 3Ntimes 3N complex DDA matrix.\n\n\n\n\n\n","category":"method"},{"location":"ddacore/","page":"DDACore","title":"DDACore","text":"CoupledElectricMagneticDipoles.DDACore.load_dda_matrix_e_m(kr,alpha_e_dl,alpha_m_dl,verbose)","category":"page"},{"location":"ddacore/#Main.CoupledElectricMagneticDipoles.DDACore.load_dda_matrix_e_m-NTuple{4, Any}","page":"DDACore","title":"Main.CoupledElectricMagneticDipoles.DDACore.load_dda_matrix_e_m","text":" load_dda_matrix_e_m(kr,alpha_e_dl,alpha_m_dl,verbose)\n\nBuilds the electric and magnetic DDA matrix A=I-Galpha with dimensionless postitions kr (two dimensional arrays of size Ntimes 3) and dimensionless electric and magnetic polarisabilities alpha_e_dl and  alpha_m_dl (a three-dimensional complex array of size Ntimes 3times 3containing the polarisability 3times 3 tensor of each dipole, or one dimensional array of size N containing the scalar polarizability of each dipole.) Return 6Ntimes 6N complex DDA matrix\n\n\n\n\n\n","category":"method"},{"location":"alphas/#Polarisabilities","page":"Alphas","title":"Polarisabilities","text":"","category":"section"},{"location":"alphas/#Functions-Documentation","page":"Alphas","title":"Functions Documentation","text":"","category":"section"},{"location":"alphas/","page":"Alphas","title":"Alphas","text":"CoupledElectricMagneticDipoles.Alphas.depolarisation_tensor","category":"page"},{"location":"alphas/#Main.CoupledElectricMagneticDipoles.Alphas.depolarisation_tensor","page":"Alphas","title":"Main.CoupledElectricMagneticDipoles.Alphas.depolarisation_tensor","text":"depolarisation_tensor(lx,ly,lz,Vn)\n\nCompute the (3x3) depolarisation tensor L of a rectangular box of sides lx, ly and lz and volume Vn.\n\n\n\n\n\n","category":"function"},{"location":"alphas/","page":"Alphas","title":"Alphas","text":"CoupledElectricMagneticDipoles.Alphas.alpha_0","category":"page"},{"location":"alphas/#Main.CoupledElectricMagneticDipoles.Alphas.alpha_0","page":"Alphas","title":"Main.CoupledElectricMagneticDipoles.Alphas.alpha_0","text":"alpha_0(e,e_m,Ln,Vn)\n\nCompute the electric quasistatic polarisabilitiy alpha_0 of a particle with dielectric constant  e, volume Vn and depolarisation tensor Ln in a medium with dielectric constant e_m. The output is a (3x3) tensor computed as follow:\n\nalpha_0=(epsilon-epsilon_mI)((epsilon-epsilon_mI)+L^-1epsilon_m)^-1L^-1V\n\n\n\n\n\n","category":"function"},{"location":"alphas/","page":"Alphas","title":"Alphas","text":"CoupledElectricMagneticDipoles.Alphas.alpha_radiative","category":"page"},{"location":"alphas/#Main.CoupledElectricMagneticDipoles.Alphas.alpha_radiative","page":"Alphas","title":"Main.CoupledElectricMagneticDipoles.Alphas.alpha_radiative","text":" alpha_radiative(a0,knorm)\n\nApply the radiative correction to the polarisability tensor a0 The output is a (3x3) tensor computed as follow:\n\nalpha=left(alpha_0^-1-ifrack^36piright)^-1\n\n\n\n\n\n","category":"function"},{"location":"alphas/","page":"Alphas","title":"Alphas","text":"CoupledElectricMagneticDipoles.Alphas.alpha_e_m_mie","category":"page"},{"location":"alphas/#Main.CoupledElectricMagneticDipoles.Alphas.alpha_e_m_mie","page":"Alphas","title":"Main.CoupledElectricMagneticDipoles.Alphas.alpha_e_m_mie","text":" alpha_e_m_mie(knorm,vac_knorm,a,n,n_m)\n\nComputes the electric and magnetic polarisabilities from the mie coefficients of a particle of refractive indes n and radius a in a medium with refractive index n_m with wavenumber knorm amd vacuum wavenumber vac_knorm. It outputs two scalars which are computed as\n\ntildealpha_E =ileft(frack^36piright)^-1a_1 tildealpha_M =ileft(frack^36piright)^-1b_1\n\n\n\n\n\n","category":"function"},{"location":"alphas/","page":"Alphas","title":"Alphas","text":"CoupledElectricMagneticDipoles.Alphas.alpha_e_m_mie_renorm","category":"page"},{"location":"alphas/#Main.CoupledElectricMagneticDipoles.Alphas.alpha_e_m_mie_renorm","page":"Alphas","title":"Main.CoupledElectricMagneticDipoles.Alphas.alpha_e_m_mie_renorm","text":" alpha_e_m_mie_renorm(knorm,vac_knorm,a,n,n_m)\n\nComputes the electric and magnetic polarisabilities in the renormalized system of units from the mie coefficients of a particle of refractive indes n and radius a in a medium with refractive index n_m with wavenumber knorm amd vacuum wavenumber vac_knorm. It outputs two scalars which are computed as\n\nalpha_E =frack^3tildealpha_E4pi=ifrac32a_1 alpha_M =frack^3tildealpha_M4pi=ifrac32b_1\n\n\n\n\n\n","category":"function"},{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"\n<embed type=\"application/pdf\" src=\"../assets/CoupledElectricMagneticDipoles.pdf\" width=\"1000\" height=\"100%\" </embed>\n\n<p>This browser does not support PDFs? Please download the PDF to view it: <a href=\"../assets/CoupledElectricMagneticDipoles.pdf\">Download PDF</a>.</p>","category":"page"},{"location":"examples/#Examples","page":"Silicon Sphere","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Silicon Sphere","title":"Silicon Sphere","text":"#imports\nusing DelimitedFiles\nimport CoupledElectricMagneticDipoles as CEMD\n\n##################### INPUT FILE HERE ###################################\n#file that contain all the refractive index for each frequency (wavelength(nm)/real part of n/imaginary part of n)\nrefractive_index=\"silicon_refractive_index.dat\"\n##########################################################################\n\n#read lattice file\nlatt=CEMD.Geometries.gen_sphere_lattice_cubes(6,230e-9)\n\n#run the DDA for all line of the refractive index files\nn_file=open(refractive_index,\"r\")\nref_id=readdlm(n_file,'\\t',Float64,'\\n')\nres=zeros(Float64,length(ref_id[:,1]),4)\nfor i=1:length(ref_id[:,1])\n    #read frequency+espilon\n    freq=ref_id[i,1]*1e-9\n    real_eps=[]\n    imag_eps=[]\n    for j=2:length(ref_id[i,:])\n        if j%2==0\n            append!(real_eps,ref_id[i,j])\n        else\n            append!(imag_eps,ref_id[i,j])\n        end\n    end\n    #norm of the wave vector\n    knorm=2*pi/freq\n    #generate polarisabilities\n    n=length(latt[:,1])\n\n    alpha=zeros(ComplexF64,n,3,3)\n    alpha0=zeros(ComplexF64,n,3,3)\n    for j=1:n\n        L=CEMD.Alphas.depolarisation_tensor(latt[j,6],latt[j,6],latt[j,6],latt[j,7])\n        epsilon=(real_eps[Int(latt[j,5])]+im*imag_eps[Int(latt[j,5])])^2\n        alpha0[j,:,:]=CEMD.Alphas.alpha_0(epsilon,1,L,latt[j,7])\n        alpha[j,:,:]=CEMD.Alphas.alpha_radiative(alpha0[j,:,:],knorm)\n    end\n\n    #println(real_eps,imag_eps)\n    p,e_inc=CEMD.DDACore.solve_DDA_e(knorm,latt[:,1:3],alpha,CEMD.InputFields.plane_wave,solver=\"AUTO\")\n    #compute cross section\n    res[i,:]=CEMD.PostProcessing.compute_cross_sections(knorm,latt[:,1:3],p,e_inc,alpha0)\nend\n\n#write results to file\nfout=open(\"results.dat\",\"w\")\nwritedlm(fout,res)\nclose(fout)\n\n","category":"page"},{"location":"green/#Green-Tensors","page":"GreenTensors","title":"Green Tensors","text":"","category":"section"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"This module is aimed to compute the electric and magnetic green tensors for the two system of units.","category":"page"},{"location":"green/#Functions-Documentation","page":"GreenTensors","title":"Functions Documentation","text":"","category":"section"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.G_e","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.G_e","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.G_e","text":"G_e(r1,r2,knorm)\n\nCompute the electric green tensor between two position  r1 and r2 with wavenumber knorm. The output is a 3x3 complex matrix. The electric green tensor (with units [1/m]) is defined as:\n\ntildeG_e=left(vecr_1vecr_2kright)=frace^ikr4 pi rleft(frac(kr)^2+ikr-1(kr)^2I+frac-(kr)^2-3ikr+3(kr)^2vecu_rotimesvecu_rright)\n\nwith\n\nr=r_1-r_2 vecu_r=left(r_1-r_2right)r\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.G_m","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.G_m","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.G_m","text":"G_m(r1,r2,knorm)\n\nCompute the magnetic green tensor between two position  r1 and r2 with wavenumber knorm. The output is a 3x3 complex matrix. The magnetic green tensor (with units [1/m^2]) is defined as:\n\ntildeG_m=left(vecr_1vecr_2kright)=frace^ikr4 pi rkleft(fracikr-1ikrright)vecu_r\n\nwith\n\nr=r_1-r_2 vecu_r=left(r_1-r_2right)r\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.G_e_renorm","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.G_e_renorm","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.G_e_renorm","text":"G_e_renorm(kr1,kr2)\n\nCompute the electric green tensor in renormalized units (see Home page) between two position multiplied by the wave number kr1 and kr2 (->dimensionless input). The output is a 3x3 complex matrix. The renormalized electric green tensor (with units [1]) is defined as:\n\nG_e=frac4*piktildeG_e\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.G_m_renorm","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.G_m_renorm","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.G_m_renorm","text":"G_m_renorm(kr1,kr2)\n\nCompute the magnetic green tensor in renormalized units (see Home page) between two position multiplied by the wave number kr1 and kr2 (->dimensionless input). The output isd a 3x3 complex matrix. The renormalized magnetic green tensor (with units [1]) is defined as:\n\nG_m=frac4*pik^2tildeG_m\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.G_em","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.G_em","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.G_em","text":"G_em(r1,r2,k)\n\nCompute the electric and magnetic green tensor between two position r1 and r2 (r2 the origin and r1 the observation) . The output are two 3x3 complex matrix. The electric green tensor (with unit of [1/m]) is defined as:\n\ntildeG_e=left(vecr_1vecr_2kright)=frace^ikr4 pi rleft(frac(kr)^2+ikr-1(kr)^2I+frac-(kr)^2-3ikr+3(kr)^2vecu_rotimesvecu_rright)\n\nThe magnetic green tensor (with unit of [1/m]) is defined as:\n\ntildeG_mk=left(vecr_1vecr_2kright)=frace^ikr4 pi rleft(fracikr-1ikrright)vecu_r\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.G_em_renorm","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.G_em_renorm","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.G_em_renorm","text":"G_em_renorm(kr1,kr2)\n\nCompute the electric and magnetic green tensor between two position r1 and r2, where the imputs are the positions multiplied by the wave number kr1 and kr2 (->dimensionless input). The output are two 3x3 complex matrix. The electric green tensor (with unit of [1]) is defined as:\n\nG_e=frac4*piktildeG_e\n\nThe magnetic green tensor (with unit of [1]) is defined as:\n\nG_m=frac4*pik^2tildeG_m\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dxG_e","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dxG_e","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dxG_e","text":"dxG_e(r1,r2,knorm)\n\nCompute the derivative electric green tensor (defined in G_e(r1,r2,knorm)) regarding the x component of r1 between two position  r1 and r2 with wavenumber knorm. The output isd a 3x3 complex matrix with units [1/m^2]\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dyG_e","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dyG_e","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dyG_e","text":"dyG_e(r1,r2,knorm)\n\nCompute the derivative electric green tensor (defined in G_e(r1,r2,knorm)) regarding the y component of r1 between two position  r1 and r2 with wavenumber knorm. The output isd a 3x3 complex matrix with units [1/m^2]\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dzG_e","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dzG_e","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dzG_e","text":"dzG_e(r1,r2,knorm)\n\nCompute the derivativeelectric green tensor (defined in G_e(r1,r2,knorm)) regarding the z component of r1 between two position  r1 and r2 with wavenumber knorm. The output isd a 3x3 complex matrix with units [1/m^2]\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dxG_m","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dxG_m","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dxG_m","text":"dxG_m(r1,r2,knorm)\n\nCompute the derivative magnetic green tensor (defined in G_m(r1,r2,knorm)) regarding the x component of r1 between two position  r1 and r2 with wavenumber knorm. The output isd a 3x3 complex matrix with units [1/m^3]\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dyG_m","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dyG_m","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dyG_m","text":"dyG_m(r1,r2,knorm)\n\nCompute the derivative magnetic green tensor (defined in G_m(r1,r2,knorm)) regarding the y component of r1 between two position  r1 and r2 with wavenumber knorm. The output isd a 3x3 complex matrix with units [1/m^3]\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dzG_m","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dzG_m","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dzG_m","text":"dzG_m(r1,r2,knorm)\n\nCompute the derivative magnetic green tensor (defined in G_m(r1,r2,knorm)) regarding the z component of r1 between two position  r1 and r2 with wavenumber knorm. The output isd a 3x3 complex matrix with units [1/m^3]\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dxG_em","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dxG_em","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dxG_em","text":"dxG_em(r1,r2,knorm)\n\nCompute the derivative green tensor (defined in Ge(r1,r2,knorm) and Gm(r1,r2,knorm)/knorm) regarding the x component of r1 between two position  r1 and r2 with wavenumber knorm. The output are two 3x3 complex matrix (with units of [1/m^2]).\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dyG_em","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dyG_em","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dyG_em","text":"dyG_em(r1,r2,knorm)\n\nCompute the derivative green tensor (defined in Ge(r1,r2,knorm) and Gm(r1,r2,knorm)/knorm) regarding the y component of r1 between two position  r1 and r2 with wavenumber knorm. The output are two 3x3 complex matrix (with units of [1/m^2]).\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.dzG_em","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.dzG_em","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.dzG_em","text":"dzG_em(r1,r2,knorm)\n\nCompute the derivative green tensor (defined in Ge(r1,r2,knorm) and Gm(r1,r2,knorm)/knorm) regarding the x component of r1 between two position  r1 and r2 with wavenumber knorm. The output are two 3x3 complex matrix (with units of [1/m^2]).\n\n\n\n\n\n","category":"function"},{"location":"green/","page":"GreenTensors","title":"GreenTensors","text":"CoupledElectricMagneticDipoles.GreenTensors.Sigma","category":"page"},{"location":"green/#Main.CoupledElectricMagneticDipoles.GreenTensors.Sigma","page":"GreenTensors","title":"Main.CoupledElectricMagneticDipoles.GreenTensors.Sigma","text":"Sigma(n)\n\nSigma represent the base-change-matrix [E, ZH] to [E, iZH]\n\n\n\n\n\n","category":"function"},{"location":"input_fields/#Input-Fields","page":"InputFields","title":"Input Fields","text":"","category":"section"},{"location":"input_fields/","page":"InputFields","title":"InputFields","text":"This module is aimed to compute the electric and magnetic green tensors for the two system of units.","category":"page"},{"location":"input_fields/#Functions-Documentation","page":"InputFields","title":"Functions Documentation","text":"","category":"section"},{"location":"input_fields/","page":"InputFields","title":"InputFields","text":"CoupledElectricMagneticDipoles.InputFields.plane_wave","category":"page"},{"location":"input_fields/#Main.CoupledElectricMagneticDipoles.InputFields.plane_wave","page":"InputFields","title":"Main.CoupledElectricMagneticDipoles.InputFields.plane_wave","text":"plane_wave(knorm,r,khat=[0,0,1],e0=[1,0,0])\n\nComputes a simple plane wave of wavenumber knorm evaluated at position r function. khat is the direction of propagation and e0 is the polarization. The output is a 3d complex vector. This plane wave is defined as:\n\nmathbfEleft(mathbfrright)=mathbfE_0e^imathbfkcdotmathbfr\n\n\n\n\n\n","category":"function"},{"location":"input_fields/","page":"InputFields","title":"InputFields","text":"CoupledElectricMagneticDipoles.InputFields.plane_wave_renorm","category":"page"},{"location":"input_fields/#Main.CoupledElectricMagneticDipoles.InputFields.plane_wave_renorm","page":"InputFields","title":"Main.CoupledElectricMagneticDipoles.InputFields.plane_wave_renorm","text":"plane_wave_renorm(kr,khat=[0,0,1],e0=[1,0,0])\n\nComputes a simple plane with dimensionless input evaluated at kr. khat is the direction of propagation and e0 is the polarization. The output is a 3d complex vector. This plane wave is defined as:\n\nmathbfEleft(mathbfrright)=mathbfE_0e^imathbfkcdotmathbfr\n\n\n\n\n\n","category":"function"},{"location":"input_fields/","page":"InputFields","title":"InputFields","text":"CoupledElectricMagneticDipoles.InputFields.plane_wave_e_m","category":"page"},{"location":"input_fields/#Main.CoupledElectricMagneticDipoles.InputFields.plane_wave_e_m","page":"InputFields","title":"Main.CoupledElectricMagneticDipoles.InputFields.plane_wave_e_m","text":"plane_wave_e_m(knorm,r,khat=[0,0,1],e0=[1,0,0])\n\nComputes a simple plane wave of wavenumber knorm evaluated at position r function. khat is the direction of propagation and e0 is the polarization. The output is a 3d complex vector. This plane wave is defined as:\n\nmathbfEleft(mathbfrright)=mathbfE_0e^imathbfkcdotmathbfr\n\n\n\n\n\n","category":"function"},{"location":"input_fields/","page":"InputFields","title":"InputFields","text":"CoupledElectricMagneticDipoles.InputFields.plane_wave_e_m_renorm","category":"page"},{"location":"input_fields/#Main.CoupledElectricMagneticDipoles.InputFields.plane_wave_e_m_renorm","page":"InputFields","title":"Main.CoupledElectricMagneticDipoles.InputFields.plane_wave_e_m_renorm","text":"plane_wave_e_m_renorm(kr,khat=[0,0,1],e0=[1,0,0])\n\nComputes a simple plane with dimensionless input evaluated at kr. khat is the direction of propagation and e0 is the polarization. The output is a 3d complex vector. This plane wave is defined as:\n\nmathbfEleft(mathbfrright)=mathbfE_0e^imathbfkcdotmathbfr\n\n\n\n\n\n","category":"function"},{"location":"input_fields/","page":"InputFields","title":"InputFields","text":"CoupledElectricMagneticDipoles.InputFields.point_dipole","category":"page"},{"location":"input_fields/#Main.CoupledElectricMagneticDipoles.InputFields.point_dipole","page":"InputFields","title":"Main.CoupledElectricMagneticDipoles.InputFields.point_dipole","text":"point_dipole(knorm, E0_const, positions, rd, dip_o)\n\nFunction that calculated the electromagnetic field emitted by a point dipole with dipole moment \n\nmathrmdip_o = dfrac1epsilon_0epsilon overrightarrowmu quad mathrm(see  equation  below)\n\nImputs\n\nknorm0 is the medium wavevector (scalar)\nE0_const is the field intensity (scalar). The modulus of the dipole moment is set to -epsilon0*epsilonm-, where -epsilon0- and -epsilonm- are the vacuum and medium permittivity, respectively.\nposition contains the position at which the field is calculated (N x 3 matrix, where -N- is the number of points)\nrd is the position of the emitting source/dipole (1 x 3 vector)\ndip_o defined the nature of the dipole. If dip_o is a scalar then:\ndip_o = 1 -> elecric dipole along x-axis\ndip_o = 2 -> elecric dipole along y-axis\ndip_o = 3 -> elecric dipole along z-axis\ndip_o = 4 -> magnetic dipole along x-axis\ndip_o = 5 -> magnetic dipole along y-axis\ndip_o = 6 -> magnetic dipole along z-axis\n\nif dip_o is a 6 x 1 vector then it specifies the dipole moment orentation of the source. \n\nOutputs\n\nE_0i is the electromagnetic field vector of the field at the requiered positions (6N x 1 vector)\n\nEquation\n\nmathbfE_mathbfmu(mathbfr) = omega^2 mu mu_0 G(mathbfr mathbfr_0) overrightarrowmu = k^2 G(mathbfr mathbfr_0) dfrac1epsilon_0epsilon overrightarrowmu\n\nwith\n\nmathrmpositions = mathbfr \nmathrmrd = mathbfr_0 \nmathrmE_mathrm0i = mathbfE_mathbfmu(mathbfr)\n\n\n\n\n\n","category":"function"},{"location":"input_fields/","page":"InputFields","title":"InputFields","text":"CoupledElectricMagneticDipoles.InputFields.point_dipole_dl","category":"page"},{"location":"input_fields/#Main.CoupledElectricMagneticDipoles.InputFields.point_dipole_dl","page":"InputFields","title":"Main.CoupledElectricMagneticDipoles.InputFields.point_dipole_dl","text":"point_dipole_dl(knorm, E0_const, kpositions, krd, dip_o)\n\nFunction that calculated the electromagnetic field emitted by a point dipole with dipole moment \n\nmathrmdip_o = dfrac1epsilon_0epsilon overrightarrowmu quad mathrm(see  equation  below)\n\nImputs\n\nknorm0 is the medium wavevector (scalar)\nE0_const is the field intensity (scalar). The modulus of the dipole moment is set to -epsilon0*epsilonm-, where -epsilon0- and -epsilonm- are the vacuum and medium permittivity, respectively.\nkposition contains the position (multiplied by the wavevector) at which the field is calculated (N x 3 matrix, where -N- is the number of points)\nkrd is the position of the emitting source/dipole (multiplied by the wavevector) (1 x 3 vector)\ndip_o defined the nature of the dipole. If dip_o is a scalar then:\ndip_o = 1 -> elecric dipole along x-axis\ndip_o = 2 -> elecric dipole along y-axis\ndip_o = 3 -> elecric dipole along z-axis\ndip_o = 4 -> magnetic dipole along x-axis\ndip_o = 5 -> magnetic dipole along y-axis\ndip_o = 6 -> magnetic dipole along z-axis\n\nif dip_o is a 6 x 1 vector then it specifies the dipole moment orentation of the source. \n\nOutputs\n\nE_0i is the electromagnetic field vector of the field at the requiered positions (6N x 1 vector)\n\nEquation\n\nmathbfE_mathbfmu(mathbfr) =  k^2 G(kmathbfr kmathbfr_0) dfrac1epsilon_0epsilon overrightarrowmu\n\nwith\n\nmathrmkpositions = mathbfkr \nmathrmkrd = mathbfkr_0 \nmathrmE_mathrm0i = mathbfE_mathbfmu(mathbfr)\n\n\n\n\n\n","category":"function"},{"location":"#CoupledElectricMagneticDipoles.jl","page":"Home","title":"CoupledElectricMagneticDipoles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome on the documentation website for the coupled electric and magnetic dipoles (CEMD), or discrete dipoles approximation (DDA) method implementation in Julia! On this website, you will find all the description of the functions implemented in this library. Please, read carefully the next sections in order to be ready to code with CoupledElectricMagneticDipoles.jl!","category":"page"},{"location":"#How-to-use-this-website","page":"Home","title":"How to use this website","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This website is divided in three parts. The first one is the theory tab, in which you will be able to find the derivations of all the formulas that are used in this software. The next tab is dedicated to the 7 submodules of the software:","category":"page"},{"location":"","page":"Home","title":"Home","text":"DDACore: Contains the functions to solve the coupled dipoles system of equations.\nGreenTensors: Contains functions to compute the electric and magnetic or both green tensors.\nAlphas: Small library to compute the polarisabilities.\nGeometries: Small library to discretize some 3d objects or to generate some 3D random structures.\nMieCoeff: Contains functions to compute the Mie coefficients.\nPostProcessing: Small library used to compute the scattering, absorption and extinction cross sections, as well as the scattered field.\nInputFields: Small library with functions for input fields (plane waves,...).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, the example tab gives three examples for the use of this library.","category":"page"},{"location":"#Installing-the-library","page":"Home","title":"Installing the library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Since the library is not yet in the big registery of the julia package manager, you have to download the CoupledElectricMagneticDipoles in local in order to use it. In order to be able to run it, please run in your julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add \"path to the library\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"With this, the package will be precompiled and the dependancies are going to be installed. Then, you will be able to import the library, by using","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CoupledElectricMagneticDipoles","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since the library is installed and activated and despite the fact that everything is unit-tested during the installation of the library,we strongly recommand you to try to run one example to see if everything's works well.","category":"page"},{"location":"#About-the-Units","page":"Home","title":"About the Units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Since the numerical methods used in the CEMD software are inputing and outputing only numbers (and not physical quantities), this is of the responsability of the user to use consistent system of units. That means that the same unit of length L should be used for positions (units of L), wavenumber (units of L⁻¹) and polarisability (units of L³).","category":"page"},{"location":"","page":"Home","title":"Home","text":"On the other hand, this code is using two different system of units","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the only electric coupled dipole method.\nFor the electric and magnetic coupled dipoles method. In this case, a renormalized system of units desribed in the Theory part is used in order to simplify the computations. The functions with the _renorm suffix are then aimed to be used for the electric and magnetic coupled dipoles method.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please then be aware of the type of","category":"page"},{"location":"#CPU-Parallel/GPU-running","page":"Home","title":"CPU Parallel/GPU running","text":"","category":"section"},{"location":"#Solvers","page":"Home","title":"Solvers","text":"","category":"section"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Authors: Augustin Muster, Diego Romero Abujetas, Luis S. Froufe-Pérez.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contact email: augustin@must-r.com","category":"page"},{"location":"","page":"Home","title":"Home","text":"We are open to any comments, ideas or questions about this software. Don't hesitate to write us, but please be aware that we are not guaranteeing support.","category":"page"},{"location":"miecoeff/#Mie-Coefficients","page":"MieCoeff","title":"Mie Coefficients","text":"","category":"section"}]
}
